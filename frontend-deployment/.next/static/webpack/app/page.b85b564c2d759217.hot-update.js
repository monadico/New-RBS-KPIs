"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/utils.ts":
/*!**********************!*\
  !*** ./lib/utils.ts ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   blueToYellow: () => (/* binding */ blueToYellow),\n/* harmony export */   buildCalendarMatrix: () => (/* binding */ buildCalendarMatrix),\n/* harmony export */   cn: () => (/* binding */ cn),\n/* harmony export */   daysOfWeek: () => (/* binding */ daysOfWeek),\n/* harmony export */   filterDataByDateRange: () => (/* binding */ filterDataByDateRange),\n/* harmony export */   formatAddress: () => (/* binding */ formatAddress),\n/* harmony export */   formatCurrency: () => (/* binding */ formatCurrency),\n/* harmony export */   formatDecimal: () => (/* binding */ formatDecimal),\n/* harmony export */   formatNumber: () => (/* binding */ formatNumber),\n/* harmony export */   getCardCountData: () => (/* binding */ getCardCountData),\n/* harmony export */   getFilteredCardCountData: () => (/* binding */ getFilteredCardCountData),\n/* harmony export */   getFilteredMetrics: () => (/* binding */ getFilteredMetrics),\n/* harmony export */   getFilteredTimeframeData: () => (/* binding */ getFilteredTimeframeData),\n/* harmony export */   getHeatmapColor: () => (/* binding */ getHeatmapColor),\n/* harmony export */   getTimeframeData: () => (/* binding */ getTimeframeData),\n/* harmony export */   jerryColorScale: () => (/* binding */ jerryColorScale)\n/* harmony export */ });\n/* harmony import */ var clsx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! clsx */ \"(app-pages-browser)/./node_modules/clsx/dist/clsx.mjs\");\n/* harmony import */ var tailwind_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tailwind-merge */ \"(app-pages-browser)/./node_modules/tailwind-merge/dist/bundle-mjs.mjs\");\n\n\nfunction cn() {\n    for(var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++){\n        inputs[_key] = arguments[_key];\n    }\n    return (0,tailwind_merge__WEBPACK_IMPORTED_MODULE_1__.twMerge)((0,clsx__WEBPACK_IMPORTED_MODULE_0__.clsx)(inputs));\n}\n// Data formatting utilities (matching frontend2 logic)\nconst formatNumber = (num)=>{\n    if (num >= 1000000) {\n        return \"\".concat((num / 1000000).toFixed(1), \"M\");\n    } else if (num >= 1000) {\n        return \"\".concat((num / 1000).toFixed(1), \"K\");\n    }\n    return num.toLocaleString();\n};\nconst formatCurrency = (num)=>{\n    return \"$\".concat(num.toLocaleString());\n};\nconst formatDecimal = (num)=>{\n    return num.toFixed(1);\n};\nconst formatAddress = function(address) {\n    let length = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;\n    return \"\".concat(address.substring(0, length), \"...\").concat(address.substring(address.length - length));\n};\n// Data processing utilities\nconst getTimeframeData = (data, selectedTimeframe)=>{\n    // Try new optimized structure first\n    if (data.timeframes && data.timeframes[selectedTimeframe]) {\n        return data.timeframes[selectedTimeframe].activity_over_time || data.activity_over_time;\n    }\n    // Fallback to legacy structure\n    switch(selectedTimeframe){\n        case 'daily':\n            var _data_daily_analytics;\n            return ((_data_daily_analytics = data.daily_analytics) === null || _data_daily_analytics === void 0 ? void 0 : _data_daily_analytics.activity_over_time) || data.activity_over_time;\n        case 'monthly':\n            var _data_monthly_analytics;\n            return ((_data_monthly_analytics = data.monthly_analytics) === null || _data_monthly_analytics === void 0 ? void 0 : _data_monthly_analytics.activity_over_time) || data.activity_over_time;\n        case 'weekly':\n        default:\n            var _data_weekly_analytics;\n            return ((_data_weekly_analytics = data.weekly_analytics) === null || _data_weekly_analytics === void 0 ? void 0 : _data_weekly_analytics.activity_over_time) || data.activity_over_time;\n    }\n};\nconst getCardCountData = (data, selectedTimeframe)=>{\n    // Try new optimized structure first\n    if (data.timeframes && data.timeframes[selectedTimeframe]) {\n        return data.timeframes[selectedTimeframe].slips_by_card_count || [];\n    }\n    // Fallback to legacy structure\n    switch(selectedTimeframe){\n        case 'daily':\n            return data.daily_slips_by_card_count || [];\n        case 'monthly':\n            return data.monthly_slips_by_card_count || [];\n        case 'weekly':\n        default:\n            return data.weekly_slips_by_card_count_new || data.weekly_slips_by_card_count || [];\n    }\n};\n// Filter data based on custom date range\nconst filterDataByDateRange = (data, startDate, endDate)=>{\n    if (!data || !Array.isArray(data)) return [];\n    // Convert dates to YYYY-MM-DD format for string comparison\n    const startDateStr = startDate.toISOString().split('T')[0];\n    const endDateStr = endDate.toISOString().split('T')[0];\n    return data.filter((item)=>{\n        if (!item.start_date) return false;\n        // Compare dates as strings (YYYY-MM-DD format)\n        const itemDateStr = item.start_date;\n        // Check if the date falls within the range (inclusive)\n        return itemDateStr >= startDateStr && itemDateStr <= endDateStr;\n    });\n};\n// Get filtered timeframe data based on selection and custom date range\nconst getFilteredTimeframeData = (data, selectedTimeframe, customStartDate, customEndDate, customRangeConfirmed)=>{\n    // Get the base timeframe data\n    let timeframeData = getTimeframeData(data, selectedTimeframe === \"custom\" ? customRangeConfirmed ? \"daily\" : \"weekly\" : selectedTimeframe);\n    // If custom timeframe is selected, confirmed, and we have date range, filter the data\n    if (selectedTimeframe === \"custom\" && customRangeConfirmed && customStartDate && customEndDate) {\n        timeframeData = filterDataByDateRange(timeframeData, customStartDate, customEndDate);\n    }\n    return timeframeData;\n};\n// Get filtered card count data based on selection and custom date range\nconst getFilteredCardCountData = (data, selectedTimeframe, customStartDate, customEndDate)=>{\n    // Get the base card count data\n    let cardCountData = getCardCountData(data, selectedTimeframe === \"custom\" ? \"daily\" : selectedTimeframe);\n    // If custom timeframe is selected and we have date range, filter the data\n    if (selectedTimeframe === \"custom\" && customStartDate && customEndDate) {\n        cardCountData = filterDataByDateRange(cardCountData, customStartDate, customEndDate);\n    }\n    return cardCountData;\n};\n// Calculate filtered totals for metrics when custom date range is selected\nconst getFilteredMetrics = (data, selectedTimeframe, customStartDate, customEndDate)=>{\n    var _data_average_metrics;\n    if (selectedTimeframe !== \"custom\" || !customStartDate || !customEndDate) {\n        var _data_total_metrics, _data_total_metrics1, _data_total_metrics2, _data_total_metrics3, _data_average_metrics1, _data_average_metrics2;\n        // Return original metrics for non-custom timeframes\n        return {\n            total_submissions: ((_data_total_metrics = data.total_metrics) === null || _data_total_metrics === void 0 ? void 0 : _data_total_metrics.total_submissions) || 0,\n            total_active_addresses: ((_data_total_metrics1 = data.total_metrics) === null || _data_total_metrics1 === void 0 ? void 0 : _data_total_metrics1.total_active_addresses) || 0,\n            total_mon_volume: ((_data_total_metrics2 = data.total_metrics) === null || _data_total_metrics2 === void 0 ? void 0 : _data_total_metrics2.total_mon_volume) || 0,\n            total_jerry_volume: ((_data_total_metrics3 = data.total_metrics) === null || _data_total_metrics3 === void 0 ? void 0 : _data_total_metrics3.total_jerry_volume) || 0,\n            avg_submissions_per_day: ((_data_average_metrics1 = data.average_metrics) === null || _data_average_metrics1 === void 0 ? void 0 : _data_average_metrics1.avg_submissions_per_day) || 0,\n            avg_cards_per_slip: ((_data_average_metrics2 = data.average_metrics) === null || _data_average_metrics2 === void 0 ? void 0 : _data_average_metrics2.avg_cards_per_slip) || 0\n        };\n    }\n    // Get filtered data for custom timeframe\n    const filteredData = getFilteredTimeframeData(data, selectedTimeframe, customStartDate, customEndDate);\n    if (!filteredData || filteredData.length === 0) {\n        return {\n            total_submissions: 0,\n            total_active_addresses: 0,\n            total_mon_volume: 0,\n            total_jerry_volume: 0,\n            avg_submissions_per_day: 0,\n            avg_cards_per_slip: 0\n        };\n    }\n    // Calculate totals from filtered data\n    const totals = filteredData.reduce((acc, period)=>{\n        acc.total_submissions += period.submissions || 0;\n        acc.total_mon_volume += period.mon_volume || 0;\n        acc.total_jerry_volume += period.jerry_volume || 0;\n        return acc;\n    }, {\n        total_submissions: 0,\n        total_mon_volume: 0,\n        total_jerry_volume: 0\n    });\n    // Calculate unique active addresses from filtered data\n    const uniqueAddresses = new Set();\n    filteredData.forEach((period)=>{\n        if (period.active_addresses) {\n            // This is a simplified approach - in reality, we'd need to track individual addresses\n            // For now, we'll use the max active addresses from the filtered period\n            uniqueAddresses.add(period.active_addresses);\n        }\n    });\n    const total_active_addresses = Math.max(...Array.from(uniqueAddresses), 0);\n    // Calculate averages\n    const avg_submissions_per_day = filteredData.length > 0 ? totals.total_submissions / filteredData.length : 0;\n    const avg_cards_per_slip = ((_data_average_metrics = data.average_metrics) === null || _data_average_metrics === void 0 ? void 0 : _data_average_metrics.avg_cards_per_slip) || 0 // Keep original for now\n    ;\n    return {\n        total_submissions: totals.total_submissions,\n        total_active_addresses,\n        total_mon_volume: totals.total_mon_volume,\n        total_jerry_volume: totals.total_jerry_volume,\n        avg_submissions_per_day,\n        avg_cards_per_slip\n    };\n};\n// Heatmap utilities\nconst daysOfWeek = [\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n    \"Sunday\"\n];\nconst buildCalendarMatrix = (dailyData, valueKey)=>{\n    // Implementation for calendar heatmap matrix\n    // This would be implemented based on the frontend2 logic\n    return [];\n};\n// Color scale utilities\nconst blueToYellow = (t)=>{\n    const c1 = [\n        99,\n        102,\n        241\n    ] // blue\n    ;\n    const c2 = [\n        245,\n        158,\n        11\n    ] // yellow\n    ;\n    const rgb = c1.map((c, i)=>Math.round(c + (c2[i] - c) * t));\n    return \"rgb(\".concat(rgb[0], \",\").concat(rgb[1], \",\").concat(rgb[2], \")\");\n};\nconst jerryColorScale = (t)=>{\n    if (t === 0) return '#f3f4f6';\n    if (t < 0.1) return '#dbeafe';\n    if (t < 0.3) return '#93c5fd';\n    if (t < 0.6) return '#3b82f6';\n    if (t < 0.8) return '#1d4ed8';\n    return '#1e40af';\n};\nconst getHeatmapColor = function(value, maxValue) {\n    let colorType = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : \"blue-yellow\";\n    if (maxValue === 0) return '#f3f4f6';\n    const ratio = value / maxValue;\n    if (colorType === \"green-red\") {\n        // Green to red scale\n        if (ratio === 0) return '#f3f4f6';\n        if (ratio < 0.1) return '#dcfce7';\n        if (ratio < 0.3) return '#86efac';\n        if (ratio < 0.6) return '#22c55e';\n        if (ratio < 0.8) return '#15803d';\n        return '#166534';\n    }\n    // Default blue-yellow scale\n    return jerryColorScale(ratio);\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/utils.ts\n"));

/***/ })

});